import asyncio
import os
from dotenv import load_dotenv
from openai import AsyncOpenAI
from app.storage.sqlite_store import SqliteVectorStore
from app.services.document_service import DocumentService

async def test_current_document_service():
    load_dotenv()
    
    try:
        storage = SqliteVectorStore("data/vectors.db")
        await storage.initialize()
        
        ai_client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        doc_service = DocumentService(storage, ai_client)
        
        # Test with REALISTIC large content (not repetitive)
        realistic_content = """
        ุงูุจุงุจ ุงูุฃูู: ุงูุชุนุฑููุงุช ูุงูุฃุญูุงู ุงูุนุงูุฉ
        
        ุงููุงุฏุฉ ุงูุฃููู: ูููุตุฏ ุจุงููุตุทูุญุงุช ุงููุงุฑุฏุฉ ูู ูุฐุง ุงููุธุงู ุงููุนุงูู ุงููุจููุฉ ุฃูุงู ูู ูููุง:
        1. ุงููุธุงู: ูุธุงู ุงููุฑุงูุนุงุช ุงูุดุฑุนูุฉ ุงูุตุงุฏุฑ ุจุงููุฑุณูู ุงููููู ุฑูู (ู/1) ูุชุงุฑูุฎ 22/1/1435ูู.
        2. ุงููุงุฆุญุฉ: ุงููุงุฆุญุฉ ุงูุชูููุฐูุฉ ููุธุงู ุงููุฑุงูุนุงุช ุงูุดุฑุนูุฉ.
        3. ุงููุญููุฉ: ุฃู ูุญููุฉ ูู ูุญุงูู ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ.
        
        ุงููุงุฏุฉ ุงูุซุงููุฉ: ุชุทุจู ุฃุญูุงู ูุฐู ุงููุงุฆุญุฉ ุนูู ุฌููุน ุงูุฏุนุงูู ูุงูุฅุฌุฑุงุกุงุช ุงูููุตูุต ุนูููุง ูู ุงููุธุงู.
        
        ุงูุจุงุจ ุงูุซุงูู: ุฅุฌุฑุงุกุงุช ุงูุชูุงุถู
        
        ุงููุงุฏุฉ ุงูุซุงูุซุฉ: ูุฌุจ ุนูู ุงููุฏุนู ุชูุฏูู ุตุญููุฉ ุงูุฏุนูู ูุดุชููุฉ ุนูู ุงูุจูุงูุงุช ุงูุชุงููุฉ:
        1. ุงุณู ุงููุญููุฉ ุงููุฑููุนุฉ ุฅูููุง ุงูุฏุนูู.
        2. ุงุณู ุงููุฏุนู ูููุจู ููููุชู ููุญู ุฅูุงูุชู.
        3. ุงุณู ุงููุฏุนู ุนููู ูููุจู ููููุชู ููุญู ุฅูุงูุชู.
        4. ุชุงุฑูุฎ ุชูุฏูู ุตุญููุฉ ุงูุฏุนูู.
        5. ููุงุฆุน ุงูุฏุนูู ูุฃุณุงููุฏูุง.
        6. ุทูุจุงุช ุงููุฏุนู.
        """
        
        large_doc = [{
            "title": "ุงุฎุชุจุงุฑ ูุธุงู ูุงูุนู",
            "content": realistic_content,
            "metadata": {"test_type": "realistic", "source": "test"}
        }]
        
        print(f"๐ Document: {large_doc[0]['title']}")
        print(f"๐ Content length: {len(large_doc[0]['content']):,} chars")
        print(f"๐ข Estimated tokens: {len(large_doc[0]['content']) // 2:,}")
        
        result = await doc_service.add_documents_batch(large_doc)
        print(f"โ Result: {result}")
        
    except Exception as e:
        print(f"โ Error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_current_document_service())
