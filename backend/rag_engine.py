"""
Elite Legal RAG Engine - Optimized & Reliable
Combines the elite legal quality that users love with speed optimizations and error handling.
Maintains the exact prompting structure that produces excellent responses.
"""

import os
from dotenv import load_dotenv
from openai import OpenAI
import markdown
from typing import List, Dict

# Load env variables
load_dotenv(".env")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
if not DEEPSEEK_API_KEY:
    raise ValueError("โ API key missing")

# Init DeepSeek
deepseek = OpenAI(api_key=DEEPSEEK_API_KEY, base_url="https://api.deepseek.com/v1")

def ask_question(query: str) -> str:
    """
    Elite legal analysis with advanced strategic enhancements.
    Maintains the exact prompting that users love.
    """
    print(f"๐ค ุณุคุงู ุงููุณุชุฎุฏู: {query}")

    # Detect if this is a formal legal document request
    if any(phrase in query for phrase in ["ุงูุฑุฏ ุงููุงูููู ุนูู ุฏุนูู", "ุฑุฏ ุนูู ุงูุฏุนูู", "ุฏููุน ูุงููููุฉ"]):
        # ELITE LEGAL DOCUMENT with advanced strategies (EXACT version users loved)
        enhanced_query = f"""ูู ุจุฅุนุฏุงุฏ ุฑุฏ ูุงูููู ูุชูุฏู ููุชููุฒ ุนูู ุงููุญู ุงูุชุงูู:

{query}

ูุทููุจ: ุฑุฏ ูุงูููู ูุชูุฏู ูุชุถูู ุงูุงุณุชุฑุงุชูุฌูุงุช ุงูุชุงููุฉ:

๐๏ธ **ุงููููู ุงูุงุณุชุฑุงุชูุฌู ุงููุชูุฏู:**
1. **ุชุฑุชูุจ ุงูุญุฌุฌ ูุฑููุงู** (ุฃููู ุงูุฏููุน ุฃููุงู)
2. **ูุบุฉ ูุงููููุฉ ูุฑูุฒุฉ ููููุฉ**
3. **ุฑุจุท ูุจุงุดุฑ ุจุงูุชูุงุฑูุฎ ูุงูุฃุฏูุฉ**

โ๏ธ **ุชุนุฒูุฒ ุงูุฅุซุจุงุช ุงููุชูุฏู:**
- ุฐูุฑ ูุณุชูุฏุงุช ููููุณุฉ (ุฅูุตุงูุงุชุ ุณุฌูุงุชุ ูุฑุงุณูุงุช ุฑุณููุฉ)
- ุฑุจุท ุงูุฃุฏูุฉ ูุจุงุดุฑุฉ ุจุงูุชูุงุฑูุฎ ูุชูููุฏ ุงูุงุฏุนุงุก ุนูููุงู
- ุชุญุฏูุฏ ุงููุณุชูุฏุงุช ุงููุทููุจุฉ ุจุฏูุฉ

๐ฏ **ุงูุทูุจุงุช ุงููุถุงุฏุฉ ุงูุงุณุชุฑุงุชูุฌูุฉ:**
- ููุจ ุงูุฏุนูู ุฌุฒุฆูุงู ูุน ุทูุจ ุชุนููุถ ุนู ุงูุฃุถุฑุงุฑ
- ุงููุทุงูุจุฉ ุจุงูุชุนููุถ ุนู ุณูุก ุงูููุฉ ุฅู ุซุจุช
- ุทูุจุงุช ุงุณุชุฑุงุชูุฌูุฉ ุชุถุน ุงููุฏุนู ูู ูููู ุฏูุงุนู

๐ **ุงูุณูุงุจู ุงููุถุงุฆูุฉ ูุงูุชูููุฐูุฉ:**
- ุงุณุชุฏุนุงุก ูุตูุต ูู ุฃุญูุงู ุงููุญููุฉ ุงูุนููุง ุงูููุงุซูุฉ
- ุฐูุฑ ุงูุณูุงุจู ุงูุชูููุฐูุฉ ุฐุงุช ุงูุตูุฉ
- ุงูุงุณุชุดูุงุฏ ุจูุฑุงุฑุงุช ุฅุฏุงุฑูุฉ ุฏุงุนูุฉ

๐ฅ **ุฏุนู ุงูุฏูุน ุจุงูุดูุงุฏุฉ:**
- ุทูุจ ุณูุงุน ุดููุฏ ูุญุฏุฏูู
- ุชุญุฏูุฏ ุงูุจูุงูุงุช ุงูุฅุถุงููุฉ ุงููุทููุจุฉ
- ุงุณุชุฑุงุชูุฌูุฉ ุงูุฅุซุจุงุช ุจุงูุดูุงุฏุฉ

๐ฌ **ุงูุชูููุฉ ูุงูุฃุฏูุฉ ุงูุฑูููุฉ:**
- ุงูุฏูุน ุจุจุทูุงู ุงูุฏููู ุงูุฑููู (ูุงุชุณุงุจ) ุชูููุงู
- ุงููุทุงูุจุฉ ุจุชุญููู ููู ูุชุฎุตุต
- ุฅุถุนุงู ุญูุฌูุฉ ุงููุญุงุฏุซุงุช ุงูุฅููุชุฑูููุฉ

๐ **ุงููุชุทูุจุงุช ุงููููุฉ:**
- ุชุญููู ุดุงูู ูุฌููุน ุงูุฌูุงูุจ ุงููุงููููุฉ ูุงูุฅุฌุฑุงุฆูุฉ
- ุงูุงุณุชุดูุงุฏ ุงููุชุนูู ุจุงูููุงุฏ ุงููุธุงููุฉ
- ุตูุบุฉ ุฑุณููุฉ ูุชูุฏูุฉ ูุงุจูุฉ ููุชูุฏูู ูููุญููุฉ
- ุงุณุชุฑุงุชูุฌูุฉ ุฏูุงุนูุฉ ูุชูุงููุฉ ููุชุนุฏุฏุฉ ุงููุณุชููุงุช
- ุชุญููู ุงููุฎุงุทุฑ ูุงูุจุฏุงุฆู ุงูุงุณุชุฑุงุชูุฌูุฉ
- ุฎุทุฉ ุชูููุฐูุฉ ูุฑุญููุฉ ููุฏูุงุน

**ุฃุณููุจ ุงููุชุงุจุฉ:** ูุบุฉ ูุงููููุฉ ูููุฉ ููุฑูุฒุฉุ ุชูุธูู ูุฑูู ููุญุฌุฌุ ุชูุตูู ุนููู ููุฎุทูุงุช."""

    else:
        # ELITE LEGAL CONSULTATION with strategic depth (EXACT version users loved)
        enhanced_query = f"""ูุฏู ุงุณุชุดุงุฑุฉ ูุงููููุฉ ูุชูุฏูุฉ ููุชููุฒุฉ ููุณุคุงู ุงูุชุงูู:

{query}

ูุทููุจ: ุงุณุชุดุงุฑุฉ ูุงููููุฉ ูุชูุฏูุฉ ุชุดูู:

๐ฏ **ุงูุชุญููู ุงูุงุณุชุฑุงุชูุฌู ุงููุชูุฏู:**
- ุชุญููู ุดุงูู ูุฌููุน ุงูุฌูุงูุจ ุงููุงููููุฉ ูุงูุนูููุฉ
- ุชูููู ุงููุฎุงุทุฑ ูุงููุฑุต ุงููุชุงุญุฉ
- ุงุณุชุฑุงุชูุฌูุงุช ูุชุนุฏุฏุฉ ุงููุณุชููุงุช

โ๏ธ **ุงูุฃุณุณ ุงููุงููููุฉ ุงููุชุนููุฉ:**
- ุฐูุฑ ุงูููุงุฏ ุงููุธุงููุฉ ูุงูุฅุฌุฑุงุกุงุช ุงููุทููุจุฉ ุจุงูุชูุตูู
- ุงูุงุณุชุดูุงุฏ ุจุงูุณูุงุจู ุงููุถุงุฆูุฉ ุฐุงุช ุงูุตูุฉ
- ุชุญููู ุงูุชุทุจููุงุช ุงูุนูููุฉ ููููุงููู

๐ **ุงูุฎุทุฉ ุงูุชูููุฐูุฉ ุงูุนูููุฉ:**
- ุฎุทูุงุช ุนูููุฉ ูุฑุญููุฉ ูุงุจูุฉ ููุชุทุจูู
- ุชุญุฏูุฏ ุงููุณุชูุฏุงุช ูุงูุฃุฏูุฉ ุงููุทููุจุฉ
- ุฌุฏูู ุฒููู ููุฅุฌุฑุงุกุงุช

๐ **ุชุญููู ุงููุฎุงุทุฑ ูุงูุจุฏุงุฆู:**
- ุชูููู ุงูุณููุงุฑูููุงุช ุงููุฎุชููุฉ
- ุงูุจุฏุงุฆู ุงูุงุณุชุฑุงุชูุฌูุฉ ุงููุชุงุญุฉ
- ุชุญููู ุงูุชูููุฉ ูุงูุนุงุฆุฏ

๐ก **ุงูุชูุตูุงุช ุงููุชูุฏูุฉ:**
- ูุตุงุฆุญ ุงุณุชุฑุงุชูุฌูุฉ ูุชุฎุตุตุฉ
- ุชุญุฐูุฑุงุช ูุงููููุฉ ูููุฉ
- ุฅุฑุดุงุฏุงุช ููุฎุทูุงุช ุงูุชุงููุฉ

**ุฃุณููุจ ุงููุชุงุจุฉ:** ุดุงูู ูููุตูุ ุนููู ููุงุจู ููุชุทุจููุ ูุบุฉ ูุงุถุญุฉ ููุชุฎุตุตุฉ."""

    try:
        response = deepseek.chat.completions.create(
            model="deepseek-chat",
            messages=[{"role": "user", "content": enhanced_query}],
            temperature=0.15,  # Very low for maximum legal precision (EXACT setting users loved)
            max_tokens=6000,   # Balanced - longer than 4000 but not max to avoid timeouts
            timeout=120        # 2 minute timeout for comprehensive responses
        )

        answer_raw = response.choices[0].message.content
        print("โ ุงูุฑุฏ ุงููุชูุฏู (ูุต ุฎุงู):", answer_raw[:300] + "...")

        # Clean and convert Markdown to HTML for the frontend
        answer_html = markdown.markdown(answer_raw)
        
        # Remove empty elements that cause display issues
        import re
        answer_html = re.sub(r'<p>\s*</p>', '', answer_html)  # Remove empty paragraphs
        answer_html = re.sub(r'<li>\s*</li>', '', answer_html)  # Remove empty list items
        answer_html = re.sub(r'<h[1-6]>\s*</h[1-6]>', '', answer_html)  # Remove empty headers
        answer_html = re.sub(r'ุงูุนูุตุฑ ุงูุซุงูู.*?(?=<|$)', '', answer_html, flags=re.DOTALL)  # Remove "ุงูุนูุตุฑ ุงูุซุงูู" artifacts
        
        return answer_html

    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุงูุงุณุชุนูุงู: {e}")
        # Fallback with simpler prompt if elite version fails
        try:
            fallback_query = f"ูุฏู ุฑุฏุงู ูุงููููุงู ุดุงููุงู ุนูู: {query}"
            response = deepseek.chat.completions.create(
                model="deepseek-chat",
                messages=[{"role": "user", "content": fallback_query}],
                temperature=0.3,
                max_tokens=3000,
                timeout=60
            )
            answer_raw = response.choices[0].message.content
            # Clean and convert Markdown to HTML for the frontend
            answer_html = markdown.markdown(answer_raw)
            
            # Remove empty elements and artifacts
            import re
            answer_html = re.sub(r'<p>\s*</p>', '', answer_html)
            answer_html = re.sub(r'<li>\s*</li>', '', answer_html)
            answer_html = re.sub(r'<h[1-6]>\s*</h[1-6]>', '', answer_html)
            answer_html = re.sub(r'ุงูุนูุตุฑ ุงูุซุงูู.*?(?=<|$)', '', answer_html, flags=re.DOTALL)
            
            return answer_html
        except Exception as fallback_error:
            print(f"โ ุฎุทุฃ ูู ุงูุงุณุชุนูุงู ุงูุจุฏูู: {fallback_error}")
            return f"<p>ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ุชููู ุฃุซูุงุก ูุนุงูุฌุฉ ุงูุณุคุงู. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.</p>"


def ask_question_with_context(query: str, conversation_history: List[Dict[str, str]]) -> str:
    """
    Elite conversational legal analysis with advanced strategic context.
    Maintains the exact prompting that users love with optimizations.
    """
    print("๐ USING ELITE LEGAL STRATEGY VERSION!")
    print(f"๐ค ุณุคุงู ุงููุณุชุฎุฏู ูุน ุงูุณูุงู: {query}")
    print(f"๐ ุนุฏุฏ ุงูุฑุณุงุฆู ุงูุณุงุจูุฉ: {len(conversation_history)}")

    # Build messages starting with conversation history
    messages = []
    
    # Limit conversation history to prevent context overload (keep last 8 messages)
    recent_history = conversation_history[-8:] if len(conversation_history) > 8 else conversation_history
    for msg in recent_history:
        messages.append({
            "role": msg["role"],
            "content": msg["content"]
        })
    
    # Enhance the current question with elite legal strategies (EXACT version users loved)
    if any(phrase in query for phrase in ["ุงูุฑุฏ ุงููุงูููู ุนูู ุฏุนูู", "ุฑุฏ ุนูู ุงูุฏุนูู", "ุฏููุน ูุงููููุฉ"]):
        # ELITE LEGAL DOCUMENT with advanced strategies
        enhanced_query = f"""ุจูุงุกู ุนูู ุงูุณูุงู ุงูุณุงุจูุ ูู ุจุฅุนุฏุงุฏ ุฑุฏ ูุงูููู ูุชูุฏู ููุชููุฒ:

{query}

ูุทููุจ: ุฑุฏ ูุงูููู ูุชูุฏู ูุฑุงุนู ุงูุณูุงู ุงูุณุงุจู ููุชุถูู:

๐๏ธ **ุงูุงุณุชุฑุงุชูุฌูุฉ ุงููุชูุฏูุฉ:**
1. **ุชุฑุชูุจ ูุฑูู ููุญุฌุฌ** (ุงูุฃููู ุฃููุงู)
2. **ูุบุฉ ูุงููููุฉ ูุฑูุฒุฉ ููููุฉ**
3. **ุฑุจุท ุงุณุชุฑุงุชูุฌู ูุน ุงูููุงูุดุงุช ุงูุณุงุจูุฉ**

โ๏ธ **ุชุนุฒูุฒ ุงูุฅุซุจุงุช ุงููุชุทูุฑ:**
- ูุณุชูุฏุงุช ููููุณุฉ (ุฅูุตุงูุงุชุ ุณุฌูุงุชุ ูุฑุงุณูุงุช)
- ุฑุจุท ูุจุงุดุฑ ุจุงูุชูุงุฑูุฎ ูุงูุฃุฏูุฉ ุงูุนูููุฉ
- ุงุณุชุฑุงุชูุฌูุฉ ุฅุซุจุงุช ูุชุนุฏุฏุฉ ุงููุณุชููุงุช

๐ฏ **ุงูุทูุจุงุช ุงููุถุงุฏุฉ ุงูุฐููุฉ:**
- ููุจ ุงูุฏุนูู ุฌุฒุฆูุงู ูุน ุทูุจุงุช ุชุนููุถ
- ุงุณุชุฑุงุชูุฌูุงุช ุชุถุน ุงููุฏุนู ูู ูููู ุฏูุงุนู
- ุทูุจุงุช ุงุญุชุฑุงุฒูุฉ ูููุงุฆูุฉ

๐ **ุงูุณูุงุจู ูุงููุฑุงุฌุน ุงููุชุฎุตุตุฉ:**
- ุฃุญูุงู ุงููุญููุฉ ุงูุนููุง ุงูููุงุซูุฉ
- ุงูุณูุงุจู ุงูุชูููุฐูุฉ ุงูุฏุงุนูุฉ
- ูุฑุงุฑุงุช ุฅุฏุงุฑูุฉ ุฐุงุช ุตูุฉ

๐ฅ **ุงุณุชุฑุงุชูุฌูุฉ ุงูุดููุฏ ูุงูุฃุฏูุฉ:**
- ุชุญุฏูุฏ ุงูุดููุฏ ุงููุทููุจูู ุจุฏูุฉ
- ุงุณุชุฑุงุชูุฌูุฉ ุฌูุน ุงูุฃุฏูุฉ ุงูุฅุถุงููุฉ
- ุฎุทุฉ ุงูุฅุซุจุงุช ุงููุฑุญููุฉ

๐ฌ **ุงูุชุญููู ุงูุชููู ููุฃุฏูุฉ:**
- ุชูููุฏ ุงูุฃุฏูุฉ ุงูุฑูููุฉ ุชูููุงู
- ุทูุจ ุงูุชุญููู ุงูููู ุงููุชุฎุตุต
- ุฅุณุชุฑุงุชูุฌูุฉ ุฅุถุนุงู ุฃุฏูุฉ ุงูุฎุตู

**ุงููุฎุฑุฌุงุช ุงููุทููุจุฉ:**
- ุชุญููู ุดุงูู ูุชุนุฏุฏ ุงููุณุชููุงุช
- ุงุณุชุดูุงุฏุงุช ูุงููููุฉ ูุชุนููุฉ
- ุฎุทุฉ ุชูููุฐูุฉ ูุฑุญููุฉ ููุตูุฉ
- ุงุณุชุฑุงุชูุฌูุฉ ุฏูุงุนูุฉ ูุชูุงููุฉ"""

    else:
        # ELITE CONSULTATION with contextual awareness
        enhanced_query = f"""ุจูุงุกู ุนูู ุณูุงู ุงููุญุงุฏุซุฉ ุงูุณุงุจูุฉุ ูุฏู ุงุณุชุดุงุฑุฉ ูุงููููุฉ ูุชูุฏูุฉ:

{query}

ูุทููุจ: ุงุณุชุดุงุฑุฉ ูุชูุฏูุฉ ุชุฑุงุนู ุงูุณูุงู ูุชุดูู:

๐ฏ **ุงูุชุญููู ุงูุณูุงูู ุงููุชูุฏู:**
- ุฑุจุท ุงูุณุคุงู ุจุงูููุงูุดุงุช ุงูุณุงุจูุฉ
- ุชุทููุฑ ุงูุงุณุชุฑุงุชูุฌูุฉ ุจูุงุกู ุนูู ุงูุณูุงู
- ุชุญููู ุดุงูู ููุชุฑุงูู

โ๏ธ **ุงูุฃุณุณ ุงููุงููููุฉ ุงููุชุนููุฉ:**
- ููุงุฏ ูุธุงููุฉ ููุตูุฉ ูุน ุงูุชุทุจูู ุงูุนููู
- ุณูุงุจู ูุถุงุฆูุฉ ุฏุงุนูุฉ
- ุชุญููู ูุชูุฏู ููููุงููู ุฐุงุช ุงูุตูุฉ

๐ **ุงูุฎุทุฉ ุงูุชูููุฐูุฉ ุงููุชุทูุฑุฉ:**
- ุฎุทูุงุช ูุฑุญููุฉ ููุตูุฉ
- ูุณุชูุฏุงุช ูุฃุฏูุฉ ูุญุฏุฏุฉ
- ุฌุฏูู ุฒููู ุงุณุชุฑุงุชูุฌู

๐ **ุชุญููู ุงููุฎุงุทุฑ ุงููุชูุฏู:**
- ุณููุงุฑูููุงุช ูุชุนุฏุฏุฉ ููุชูุฑุนุฉ
- ุจุฏุงุฆู ุงุณุชุฑุงุชูุฌูุฉ ูุชููุนุฉ
- ุชูููู ุดุงูู ููุชูููุฉ ูุงูุนุงุฆุฏ

๐ก **ุงูุชูุตูุงุช ุงูุงุณุชุฑุงุชูุฌูุฉ:**
- ูุตุงุฆุญ ูุชุฎุตุตุฉ ููุชูุฏูุฉ
- ุชุญุฐูุฑุงุช ูุงููููุฉ ุฏูููุฉ
- ุฅุฑุดุงุฏุงุช ูููุฑุงุญู ุงูุชุงููุฉ"""

    # Add the enhanced current question
    messages.append({
        "role": "user",
        "content": enhanced_query
    })

    try:
        response = deepseek.chat.completions.create(
            model="deepseek-chat",
            messages=messages,
            temperature=0.15,  # Very low for maximum precision (EXACT setting users loved)
            max_tokens=6000,   # Balanced for comprehensive responses
            timeout=120        # 2 minute timeout
        )

        answer_raw = response.choices[0].message.content
        print("โ ุงูุฑุฏ ุงููุชูุฏู ูุน ุงูุณูุงู (ูุต ุฎุงู):", answer_raw[:300] + "...")

        # Clean and convert Markdown to HTML for the frontend
        answer_html = markdown.markdown(answer_raw)
        
        # Remove empty elements and artifacts
        import re
        answer_html = re.sub(r'<p>\s*</p>', '', answer_html)
        answer_html = re.sub(r'<li>\s*</li>', '', answer_html)
        answer_html = re.sub(r'<h[1-6]>\s*</h[1-6]>', '', answer_html)
        answer_html = re.sub(r'ุงูุนูุตุฑ ุงูุซุงูู.*?(?=<|$)', '', answer_html, flags=re.DOTALL)
        
        return answer_html

    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุงูุงุณุชุนูุงู ูุน ุงูุณูุงู: {e}")
        # Fallback with simpler prompt if elite version fails
        try:
            fallback_query = f"ุจูุงุกู ุนูู ุงูุณูุงู ุงูุณุงุจูุ ูุฏู ุงุณุชุดุงุฑุฉ ุดุงููุฉ: {query}"
            messages[-1]["content"] = fallback_query
            response = deepseek.chat.completions.create(
                model="deepseek-chat",
                messages=messages,
                temperature=0.3,
                max_tokens=3000,
                timeout=60
            )
            answer_raw = response.choices[0].message.content
            # Clean and convert Markdown to HTML
            answer_html = markdown.markdown(answer_raw)
            
            # Remove empty elements and artifacts
            import re
            answer_html = re.sub(r'<p>\s*</p>', '', answer_html)
            answer_html = re.sub(r'<li>\s*</li>', '', answer_html)
            answer_html = re.sub(r'<h[1-6]>\s*</h[1-6]>', '', answer_html)
            answer_html = re.sub(r'ุงูุนูุตุฑ ุงูุซุงูู.*?(?=<|$)', '', answer_html, flags=re.DOTALL)
            
            return answer_html
        except Exception as fallback_error:
            print(f"โ ุฎุทุฃ ูู ุงูุงุณุชุนูุงู ุงูุจุฏูู ูุน ุงูุณูุงู: {fallback_error}")
            return f"<p>ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ุชููู ุฃุซูุงุก ูุนุงูุฌุฉ ุงูุณุคุงู. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.</p>"


def generate_conversation_title(first_message: str) -> str:
    """
    Advanced conversation title generation with error handling.
    """
    try:
        prompt = f"ุงูุชุฑุญ ุนููุงูุงู ูุงููููุงู ูุชุฎุตุตุงู ููุฎุชุตุฑุงู ููุฐู ุงูุงุณุชุดุงุฑุฉ (ุฃูู ูู 45 ุญุฑู): {first_message[:200]}"

        response = deepseek.chat.completions.create(
            model="deepseek-chat",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3,
            max_tokens=100,
            timeout=30  # Quick timeout for titles
        )

        title = response.choices[0].message.content.strip()
        
        # Clean up the response
        title = title.strip('"').strip("'").strip()
        
        # Remove common prefixes
        prefixes = ["ุงูุนููุงู ุงูููุชุฑุญ:", "ุงูุนููุงู:", "ุงูููุชุฑุญ:", "ุนููุงู ุงููุถูุฉ:", "ุงูุงุณุชุดุงุฑุฉ:"]
        for prefix in prefixes:
            if title.startswith(prefix):
                title = title[len(prefix):].strip()
        
        return title if len(title) <= 45 else title[:42] + "..."
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุชูููุฏ ุงูุนููุงู: {e}")
        
        # Simple fallback - extract key words from the message
        if len(first_message) > 25:
            return first_message[:25] + "..."
        return first_message