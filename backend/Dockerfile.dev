# Multi-stage Dockerfile for development and production
FROM python:3.11-slim as base
WORKDIR /app

# Install system dependencies for PostgreSQL
RUN apt-get update && apt-get install -y \
    gcc \
    libpq-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Development stage
FROM base as development
COPY . .
RUN useradd --create-home app && chown -R app:app /app
USER app
EXPOSE 8000
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# Production stage (for AWS)
FROM base as production
COPY . .

# Create app user and set permissions
RUN useradd --create-home app && chown -R app:app /app

# Create data directory for SQLite with proper permissions
RUN mkdir -p /app/data && chown -R app:app /app/data

USER app
EXPOSE 8000

# Set production environment variables
ENV DEBUG=False
ENV ENVIRONMENT=production
# Database URL will be configured via environment variables from AWS Secrets Manager
# ENV DATABASE_URL will be set by ECS task definition
ENV AI_PROVIDER=openai
ENV ALGORITHM=HS256
ENV ACCESS_TOKEN_EXPIRE_MINUTES=30
ENV APP_NAME="Arabic Legal Assistant"
ENV CORS_ORIGINS="https://d10drat4g0606g.cloudfront.net,https://d2c979d13bkvf4.cloudfront.net"
# SECRET_KEY and OPENAI_API_KEY will be provided by ECS from AWS Secrets Manager

# Health check for production
HEALTHCHECK --interval=60s --timeout=30s --start-period=180s --retries=3 \
    CMD curl -f http://localhost:8000/ || exit 1

CMD ["gunicorn", "app.main:app", "--worker-class", "uvicorn.workers.UvicornWorker", "--workers", "1", "--timeout", "600", "--bind", "0.0.0.0:8000"]